iter_save_T<-round(c(1,seq(12,num_iter_T,length.out = 15)),0)
outputCASPIAN <- SpreadModel(parameters=bestPars,init_obj=init_obj,
Terrestrial_netw_data=Terrestrial_netw_data,
Commodities_shape_data=Commodities_shape_data,
Pallets_netw_data=Pallets_netw_data,
Container_netw_data=Container_netw_data,
netw_type=netw_type,traffic_type=traffic_type_T,
init_coords=init_coords_T, num_iter=num_iter_T,max_dist = max_dist_T,
incl_attachment=incl_attachment,incl_airflow=incl_airflow, incl_natural=incl_natural,
incl_containers=incl_containers,incl_pallets=incl_pallets,
Cont_treshold=Cont_treshold,Pall_threshold=Pall_treshold,
species_preferences=species_preferences,
iter_save = iter_save_T,plot_funct_rel=plot_funct_rel
)
plotResults(list_results = outputCASPIAN[1],shapeObj = SenecioRoad[SenecioRoad@data$Typ%in%netw_type,],save_plot = FALSE,save_dir = mainDir)
points(init_coords_senecio[,1:2],cex=1.1,lwd=1.5)
plot(SenecioSubset,add=T,lty=2)
scalebar(d = 50,type = "bar",divs = 4,label = c("0","Km","50"))
plotResults(list_results = outputCASPIAN[9],shapeObj = SenecioRoad[SenecioRoad@data$Typ%in%netw_type,],save_plot = FALSE,save_dir = mainDir)
points(data_coords_senecio[iter<=96,1:2],cex=1.1,lwd=1.5)
plot(SenecioSubset,add=T,lty=2)
scalebar(d = 50,type = "bar",divs = 4,label = c("0","Km","50"))
plotResults(list_results = outputCASPIAN[length(outputCASPIAN)],shapeObj = SenecioRoad[SenecioRoad@data$Typ%in%netw_type,],save_plot = FALSE,save_dir = mainDir)
points(data_coords_senecio[,1:2],cex=1.2,lwd=1.5)
plot(SenecioSubset,add=T,lty=2)
scalebar(d = 50,type = "bar",divs = 4,label = c("0","Km","50"))
parameters
getConfigFile("~/../Desktop/")
load("C:/Users/mbagnara/Desktop/Senecio/Calibration/SenecioCalib_NormPrior_YesEst0/bestPars.rData")
bestPars
44/1400
44/1400*20000/60
source('C:/Users/mbagnara/Desktop/AmbrosiaCalibration/CalibrationAmbrosia.R')
Auc_CASPIAN(start[1,])
pars<-(start[1,])
#  pars<-BCsetup$prior$sampler(1)
if (is.vector(pars))  pars = matrix(pars, nrow = 1)
p <- matrix(NA, nrow = nrow(pars), ncol = length(defaultValues))
for (i in 1:nrow(pars)) p[i, ] <- suppressWarnings(createMixWithDefaults(pars[i,
1:ncol(pars)], defaultValues, parSel)
)
colnames(p) <- colnames(defaultValues)
# ifelse(parallelOption == FALSE, yes = parameterList <- pars[[1]],
#        no = parameterList <- pars)
#
load(init_file)
invisible(capture.output(
outputCASPIAN <- SpreadModel(parameters=p,init_obj=init_obj,
Terrestrial_netw_data=Terrestrial_netw_data,
Commodities_shape_data=Commodities_shape_data,
Pallets_netw_data=Pallets_netw_data,
Container_netw_data=Container_netw_data,
netw_type=netw_type,traffic_type=traffic_type_T,
init_coords=init_coords_T, num_iter=num_iter_T,max_dist = max_dist_T,
incl_attachment=incl_attachment,incl_airflow=incl_airflow, incl_natural=incl_natural,
incl_containers=incl_containers,incl_pallets=incl_pallets,
Cont_treshold=Cont_treshold,Pall_threshold=Pall_treshold,
species_preferences=species_preferences,
iter_save = num_iter_T,plot_funct_rel=plot_funct_rel
)
))
#
# if (parallelOption == FALSE) {
#   parameterList <- pars
#   outputLPJ <- list(outputLPJ)
#
nruns <- 1
# } else nruns <- length(parameterList)
#
AUCs <- c()
nparticles<-1
AUC <- NA
length(outputCASPIAN)
sink()
sink()
length(outputCASPIAN)
predicted <- outputCASPIAN[[nsteps]][,c("ID","Pinv")]
nsteps<-1
predicted <- outputCASPIAN[[nsteps]][,c("ID","Pinv")]
observed <- InvasionData[[nsteps]]
llobj <- merge(observed, predicted, all = FALSE,
by = "ID")
#     AUC here
colnames(llobj)<-c("ID","Observed","CASPIAN")
AUC<-presence.absence.accuracy(llobj, threshold = 0.5, find.auc = TRUE, st.dev = FALSE, which.model=1)$AUC
llobj
head(llobj)
AUC<-presence.absence.accuracy(llobj, threshold = 0.5, find.auc = TRUE, st.dev = FALSE, which.model=1,na.rm = T)$AUC
options(warn = 0)
AUC<-presence.absence.accuracy(llobj, threshold = 0.5, find.auc = TRUE, st.dev = FALSE, which.model=1,na.rm = T)$AUC
options(warn = 1)
AUC<-presence.absence.accuracy(llobj, threshold = 0.5, find.auc = TRUE, st.dev = FALSE, which.model=1,na.rm = T)$AUC
?options
source('C:/Users/mbagnara/Desktop/AmbrosiaCalibration/CalibrationAmbrosia.R')
warnings()
sink()
sink()
warnings()
pars
start
pars(start[1,])
pars<-(start[1,])
if (is.vector(pars))  pars = matrix(pars, nrow = 1)
p <- matrix(NA, nrow = nrow(pars), ncol = length(defaultValues))
for (i in 1:nrow(pars)) p[i, ] <- suppressWarnings(createMixWithDefaults(pars[i,
1:ncol(pars)], defaultValues, parSel)
)
colnames(p) <- colnames(defaultValues)
# nerr <- length(grep("errpar", colnames(p)))
# pars <- p[, -tail(1:ncol(p), nerr)]
# ifelse(is.matrix(pars), yes = pars <- ListPar(pars),
#        no = pars <- ListPar(t(as.matrix(pars))))
# ifelse(parallelOption == FALSE, yes = parameterList <- pars[[1]],
#        no = parameterList <- pars)
#
load(init_file)
invisible(capture.output(
outputCASPIAN <- SpreadModel(parameters=p,init_obj=init_obj,
Terrestrial_netw_data=Terrestrial_netw_data,
Commodities_shape_data=Commodities_shape_data,
Pallets_netw_data=Pallets_netw_data,
Container_netw_data=Container_netw_data,
netw_type=netw_type,traffic_type=traffic_type_T,
init_coords=init_coords_T, num_iter=num_iter_T,max_dist = max_dist_T,
incl_attachment=incl_attachment,incl_airflow=incl_airflow, incl_natural=incl_natural,
incl_containers=incl_containers,incl_pallets=incl_pallets,
Cont_treshold=Cont_treshold,Pall_threshold=Pall_treshold,
species_preferences=species_preferences,
iter_save = num_iter_T,plot_funct_rel=plot_funct_rel
)
))
#
# if (parallelOption == FALSE) {
#   parameterList <- pars
#   outputLPJ <- list(outputLPJ)
#
nruns <- 1
# } else nruns <- length(parameterList)
#
AUCs <- c()
for (nparticles in 1:nruns) {
AUC <- NA
for (nsteps in 1:length(outputCASPIAN)){
predicted <- outputCASPIAN[[nsteps]][,c("ID","Pinv")]
observed <- InvasionData[[nsteps]]
llobj <- merge(observed, predicted, all = FALSE,
by = "ID")
#     AUC here
colnames(llobj)<-c("ID","Observed","CASPIAN")
nparticles<-1
nsteps<-1
predicted <- outputCASPIAN[[nsteps]][,c("ID","Pinv")]
observed <- InvasionData[[nsteps]]
llobj <- merge(observed, predicted, all = FALSE,
by = "ID")
#     AUC here
colnames(llobj)<-c("ID","Observed","CASPIAN")
options(warn = -1)
AUC<-presence.absence.accuracy(llobj, threshold = 0.5, find.auc = TRUE, st.dev = FALSE, which.model=1,na.rm = T)$AUC
options(warn = 0)
AUC
presence.absence.accuracy(llobj, threshold = 0.5, find.auc = TRUE, st.dev = FALSE, which.model=1,na.rm = T)
llobj$Observed<-1
AUC<-presence.absence.accuracy(llobj, threshold = 0.5, find.auc = TRUE, st.dev = FALSE, which.model=1,na.rm = T)$AUC
AUC
presence.absence.accuracy(llobj, threshold = 0.5, find.auc = TRUE, st.dev = FALSE, which.model=1,na.rm = T)
sample(x = c(0,1),size = nrow(llobj),replace = TRUE)
llobj$Observed<-sample(x = c(0,1),size = nrow(llobj),replace = TRUE)
presence.absence.accuracy(llobj, threshold = 0.5, find.auc = TRUE, st.dev = FALSE, which.model=1,na.rm = T)
predicted.prevalence(llobj)
head(SPDATA)
data("SPDATA")
head(SPDATA)
summary(SPDATA)
head(SPDATA,100)
predicted <- outputCASPIAN[[nsteps]][,c("ID","Pinv")]
observed <- InvasionData[[nsteps]]
llobj <- merge(observed, predicted, all = FALSE,
by = "ID")
#     AUC here
colnames(llobj)<-c("ID","Observed","CASPIAN")
options(warn = -1)
AUC<-presence.absence.accuracy(llobj, threshold = 0.5, find.auc = TRUE, st.dev = FALSE, which.model=1,na.rm = T)$AUC
presence.absence.accuracy(llobj, threshold = 0.5, find.auc = TRUE, st.dev = FALSE, which.model=1,na.rm = T)
source('C:/Users/mbagnara/Desktop/AmbrosiaCalibration/CalibrationAmbrosia.R')
sink()
sink()
source('C:/Users/mbagnara/Desktop/AmbrosiaCalibration/CalibrationAmbrosia.R')
SPDATA<-data("SPDATA")
par(oma = c(0, 5, 0, 0), mar = c(3, 3, 3, 1), mfrow = c(2,3), cex = 0.7, cex.lab = 1.4, mgp = c(2, 0.5, 0))
sp <- c("JUSC2", "PICO")
for (i in 1:2) {
for (mod in 1:3) {
calibration.plot(DATA, which.model = mod, color = mod +
1, main = model.names[mod], xlab = "", ylab = "")
if (mod == 1) {
mtext(sp[i], side = 2, line = 6.3, cex = 1.6)
mtext(paste("(", Obs.prev[names(Obs.prev) == sp[i]],
+ "Prevalence )"), side = 2, line = 4.3, cex = 1.3)
}
par(oma = c(0, 5, 0, 0), mar = c(3, 3, 3, 1), mfrow = c(2,3), cex = 0.7, cex.lab = 1.4, mgp = c(2, 0.5, 0))
sp <- c("JUSC2", "PICO")
i<-1
mod<-1
calibration.plot(DATA, which.model = mod, color = mod +
1, main = model.names[mod], xlab = "", ylab = "")
DATA = SPDATA[SPDATA$SPECIES == sp[i], ]
SPDATA
library(PresenceAbsence)
SPDATA<-data(SPDATA)
sp <- c("JUSC2", "PICO")
DATA = SPDATA[SPDATA$SPECIES == sp[i], ]
i<-1
DATA = SPDATA[SPDATA$SPECIES == sp[i], ]
SPDATA
data("SPDATA")
DATA = SPDATA[SPDATA$SPECIES == sp[i], ]
head(DATA)
mod<-1
calibration.plot(DATA, which.model = mod, color = mod + 1, main = model.names[mod], xlab = "", ylab = "")
calibration.plot(DATA, which.model = mod, color = mod + 1, main = ncol(DATA)[mod+2], xlab = "", ylab = "")
graphics.off()
calibration.plot(DATA, which.model = mod, color = mod + 1, main = ncol(DATA)[mod+2], xlab = "", ylab = "")
pdf("GoodnessOfFit.pdf",width = 7,height = 7)
predicted <- outputCASPIAN[[tail(names(outputCASPIAN),1)]][,c("ID","Pinv")]
observed <- InvasionData[[tail(names(outputCASPIAN),1)]]
GoF <- merge(observed, predicted, all = FALSE,
by = "ID")
colnames(GoF)<-c("ID","Observed","CASPIAN")
calibration.plot(GoF, which.model = 1, color = "red", main = ncol(GoF)[3])
dev.off()
pdf("GoodnessOfFit.pdf",width = 7,height = 7)
predicted <- outputCASPIAN[[tail(names(outputCASPIAN),1)]][,c("ID","Pinv")]
observed <- InvasionData[[tail(names(outputCASPIAN),1)]]
GoF <- merge(observed, predicted, all = FALSE,
by = "ID")
colnames(GoF)<-c("ID","Observed","CASPIAN")
plot(CASPIAN~Observed,data=GoF,pch=16)
abline(0,1,col="red",lty=2)
dev.off()
library(CASPIAN)
head(Ship_Travel_Netw@data)
library(CASPIAN)
getConfigFile("~/../Desktop/")
setwd("~/../Desktop/")
runCASPIAN("ConfigFile.R")
source("ConfigFile.R")
library(CASPIAN)
source("ConfigFile.R")
rm(list=ls())
runCASPIAN("ConfigFile.R")
getwd()
runCASPIAN("ConfigFile.R")
head(Ship_Travel_Netw@data)
colnames(Ship_Travel_Netw@data)
library(CASPIAN)
runCASPIAN("ConfigFile.R")
source("ConfigFile.R")
# build parameter matrix
parameters<-ParMatrix(par_att0_Roads,par_att0_Railways,par_att1,par_att2,par_att3,
par_air0_Roads,par_air0_Railways,par_air1,par_air2,
par_nat1,par_nat2,par_est_T,par_cont,par_pall,
par_nat_a,par_nat_b,par_ball,
par_a,par_c1,par_g,par_c2,par_b,par_c3,par_est_W
)
#build land cover species preference matrix
species_preferences<- data.table(LC_cat_ID= 1:5,Species_preferences=c(Urban_areas,Arable_land,Pastures,Forests,Wetlands))
modelResults<-list()
#running model:
dir.name_W<-file.path(getwd(),paste0("CASPIAN_Aquatic_",format(Sys.time(), "%d-%b-%Y %H-%M-%S")))
dir.create(dir.name_W)
init_water_data<-InitializeWaterSpread(Water_netw_data=Water_netw_data,
init_coords=init_coords_W,max_dist=max_dist_W,
#netw_type=netw_type,
save_init=save_init, save_dir=dir.name_W,file_init=file_init,
#species_preferences=species_preferences,
traffic_type=traffic_type_W
)
for(i in 1:length(init_obj)) assign(names(init_obj)[i], init_obj[[i]])
init_obj<-init_water_data
for(i in 1:length(init_obj)) assign(names(init_obj)[i], init_obj[[i]])
water_netw<-water_shp@data
water_netw
water_netw
nparset<-1
water_netw[,Pi_ballast:=f_ballast(CargoToNode,parameters[nparset,"ball1"])]
summary(water_netw)
#Filling NAs
water_netw[is.na(Pi_ballast),Pi_ballast:=0]
summary(water_netw)
water_netw[,p_natural:=f_natural_water(a = parameters[nparset,"nat_a"],b = parameters[nparset,"nat_b"],d=Length )]
summary(water_netw)
plot(sort(water_netw$p_natural))
plot(water_netw$p_natural~water_netw$Length)
par_nat_a
par_nat_b
f_natural_water()
f_natural_water
summary(f_natural_water(2,2,water_netw$Lenght))
summary(f_natural_water(2,2,d=water_netw$Lenght))
summary(f_natural_water(a=2,b=2,d=water_netw$Lenght))
summary(f_natural_water(a=2,b=2,d=1:100))
summary(f_natural_water(a=1,b=2,d=1:100))
summary(f_natural_water(a=1,b=10,d=1:100))
summary(f_natural_water(a=1,b=100,d=1:100))
plot(f_natural_water(a=1,b=100,d=1:100))
plot(f_natural_water(a=1,b=10,d=1:100))
plot(f_natural_water(a=1,b=1,d=1:100))
plot(f_natural_water(a=1,b=.5,d=1:100))
plot(f_natural_water(a=1,b=.2,d=1:100))
plot(f_natural_water(a=.9,b=.2,d=1:100))
plot(f_natural_water(a=.99,b=.2,d=1:100))
plot(f_natural_water(a=.99,b=.2,d=water_netw$Length))
plot(f_natural_water(a=.99,b=.2,d=water_netw$Length)~water_netw$Length)
plot(f_natural_water(a=10.5,b=2.5,d=c(water_netw$Length*1000))~c(water_netw$Length*1000))
runCASPIAN("ConfigFile.R")
runCASPIAN("ConfigFile.R")
runCASPIAN("ConfigFile.R")
runCASPIAN("ConfigFile.R")
news
newstate_aqua
runCASPIAN("ConfigFile.R")
runCASPIAN("ConfigFile.R")
runCASPIAN("ConfigFile.R")
runCASPIAN("ConfigFile.R")
output<-runCASPIAN("ConfigFile.R")
source('~/.active-rstudio-document')
getwd()
getConfigFile(getwd())
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
output<-runCASPIAN("~/../Desktop/configFile.R")
source('~/GitHub/AlienSpeciesSpread/CASPIAN/R/runCASPIAN.R')
output<-runCASPIAN("~/../Desktop/configFile.R")
library(CASPIAN)
library(CASPIAN)
length(unique(Ship_Travel_Netw@data$FromNode))
load("C:/Users/mbagnara/Desktop/Senecio/Calibration/Senecio2nd_Calib_UnifPrior_NoEst0_NoPallets/CalibrationResults.rData")
getConfigFile(getwd())
setwd("~~/../Desktop/")
getConfigFile(getwd())
output<-runCASPIAN("~/../Desktop/configFile.R")
dev.off()
getConfigFile(getwd())
output<-runCASPIAN("~/../Desktop/configFile.R")
output[1][1]
output<-runCASPIAN("~/../Desktop/configFile.R")
dev.off()
"txt"%in%export_results
export_results=c("txt","csv")  #Should results be exported in the newly created folder? Supported values are "csv" and "txt".
"txt"%in%export_results
rm(list=ls())
output<-runCASPIAN("~/../Desktop/configFile.R")
file_init
library(CASPIAN)
output<-runCASPIAN("~/../Desktop/configFile.R")
dev.off()
init_file
rm(list=ls())
load("C:/Users/mbagnara/Desktop/CASPIAN_Terrestrial_11-Mar-2019 18-06-52/init_data.Rdata")
ls()
roads_shp<-init_obj$roads_shp
?writeOGR
try(writeOGR(roads_shp, dsn="" C:/Users/mbagnara/Desktop/CASPIAN_Terrestrial_11-Mar-2019 18-06-52", layer="Terrestrial_network", driver="ESRI Shapefile"))
try(writeOGR(roads_shp, dsn="C:/Users/mbagnara/Desktop/CASPIAN_Terrestrial_11-Mar-2019 18-06-52", layer="Terrestrial_network", driver="ESRI Shapefile"))
library(CASPIAN)
getwd()
getConfigFile("~/../Desktop/")
output<-runCASPIAN("~/../Desktop/configFile.R")
library(CASPIAN)
head(Ship_Travel_Netw@data)
SpecNorm
#Set optimal Temperature and Conductivity for establishment
specTemp <- 13 # optimal Temperature (degrees C)
specCond <- 100 # optimal Conductivity (mS/m)
#build aquatic species preference matrix
species_preferences<- data.table(specTemp= SpecTemp,specCond= SpecCond)
#build aquatic species preference matrix
species_preferences<- data.table(specTemp= specTemp,specCond= specCond)
species_preferences
#build aquatic species preference matrix
species_preferences<- data.table(specTemp,specCond)
species_preferences
library(CASPIAN)
getwd()
setwd("~/../Desktop")
getConfigFile(getwd())
output<-runCASPIAN("~/../Desktop/configFile.R")
outputCASPIAN[[2]]
output[2]
output
output$AquaticResults[2]
x<-CRS("+init=epsg:3819")
x
projInfo(type = "proj")
x<-CRS("+init=epsg:31468")
x
setwd("Corbicula/")
getConfigFile(getwd())
setwd("../Dikerogammarus/")
getConfigFile(getwd())
library(CASPIAN)
?runif
install.packages(PresenceAbsence)
install.packages("PresenceAbsence")
library(PresenceAbsence)
load("G:/CalibrationCASPIAN/Corbicula/Calibration_Est.7-1/CalibrationResults.rData")
library(BayesianTools)
x<-MAP(resDREAM)
x
x<-MAP(resDREAM)[[1]]
x
install.packages("Search")
install.packages(c("geosphere", "SearchTrees", "raster", "openxlsx"))
AUC_CASPIAN(x)
init_file
init_file<-"G:\CalibrationCASPIAN\Corbicula\init_data.Rdata"
init_file<-"G:\\CalibrationCASPIAN\\Corbicula\\init_data.Rdata"
AUC_CASPIAN(x)
library(CASPIAN)
AUC_CASPIAN(x)
AUC_CASPIAN(x)/100
(AUC_CASPIAN(x)/100)+1
pars<-x
if (is.vector(pars))  pars = matrix(pars, nrow = 1)
p <- matrix(NA, nrow = nrow(pars), ncol = length(defaultValues))
for (i in 1:nrow(pars)) p[i, ] <- suppressWarnings(createMixWithDefaults(pars[i,
1:ncol(pars)], defaultValues, parSel)
)
colnames(p) <- colnames(defaultValues)
# nerr <- length(grep("errpar", colnames(p)))
# pars <- p[, -tail(1:ncol(p), nerr)]
# ifelse(is.matrix(pars), yes = pars <- ListPar(pars),
#        no = pars <- ListPar(t(as.matrix(pars))))
# ifelse(parallelOption == FALSE, yes = parameterList <- pars[[1]],
#        no = parameterList <- pars)
#
load(init_file)
# load(netw_file)
assign(x="pars",value=pars,envir = .GlobalEnv)
invisible(capture.output(
outputCASPIAN <- WaterSpreadModel(parameters=p,init_obj=init_water_data,
Water_netw_data=Water_netw_data,
traffic_type=traffic_type_W,
init_coords=init_coords_W, num_iter=num_iter_W,max_dist = max_dist_W,
incl_hullfouling=incl_hullfouling,incl_natural_water=incl_natural_water,incl_ballast=incl_ballast,
Port_time=Port_time,Paint_time=Paint_time,
iter_save = iter_save_W,plot_funct_rel=plot_funct_rel
)
))
#
# if (parallelOption == FALSE) {
#   parameterList <- pars
#   outputLPJ <- list(outputLPJ)
#
nruns <- 1
# } else nruns <- length(parameterList)
#
AUCs <- c()
for (nparticles in 1:nruns) {
AUC <- c()
for (nsteps in 1:length(outputCASPIAN)){
predicted <- outputCASPIAN[[nsteps]][,c("ID","Pinv")]
observed <- CompleteInvasionData[[nsteps]]
llobj <- merge(observed, predicted, all = FALSE,
by = "ID")
#     AUC here
colnames(llobj)<-c("ID","Observed","CASPIAN")
InitLinks<-which(llobj$ID%in%init_water_data$init_segm)
if (length(InitLinks)!=0) { llobj<-llobj[-InitLinks,]}
options(warn = -1)
singleAUC<-presence.absence.accuracy(llobj, threshold = 0.5, find.auc = TRUE, st.dev = FALSE, which.model=1,na.rm = T)$PCC
options(warn = 0)
predicted <- outputCASPIAN[[nsteps]][,c("ID","Pinv")]
nsteps<-1
predicted <- outputCASPIAN[[nsteps]][,c("ID","Pinv")]
observed <- CompleteInvasionData[[nsteps]]
llobj <- merge(observed, predicted, all = FALSE,
by = "ID")
#     AUC here
colnames(llobj)<-c("ID","Observed","CASPIAN")
InitLinks<-which(llobj$ID%in%init_water_data$init_segm)
if (length(InitLinks)!=0) { llobj<-llobj[-InitLinks,]}
options(warn = -1)
singleAUC<-presence.absence.accuracy(llobj, threshold = 0.5, find.auc = TRUE, st.dev = FALSE, which.model=1,na.rm = T)$PCC
options(warn = 0)
singleAUC
singleAUC-1
singleAUC<-c((singleAUC-1)*100)
singleAUC
-253.0639/length(outputCASPIAN)
-253.0639/length(outputCASPIAN)/100
-253.0639/length(outputCASPIAN)/100+1
x
init_file<-"G:\\CalibrationCASPIAN\\Dikerogammarus\\init_data.Rdata"
load("G:/CalibrationCASPIAN/Dikerogammarus/CalibrationResults.rData")
init_file<-"G:\\CalibrationCASPIAN\\Dikerogammarus\\init_data.Rdata"
x<-MAP(resDREAM)[[1]]
AUC_CASPIAN(x)/length(outputCASPIAN)/100+1
x
load("G:/CalibrationCASPIAN/Senecio/CalibrationResults.rData")
GoF
predicted <- outputCASPIAN[[tail(names(outputCASPIAN),1)]][,c("ID","Pinv")]
observed <- InvasionData[[tail(names(outputCASPIAN),1)]]
GoF <- merge(observed, predicted, all = FALSE,
by = "ID")
colnames(GoF)<-c("ID","Observed","CASPIAN")
presence.absence.accuracy(GoF, threshold = 0.5, find.auc = TRUE, st.dev = FALSE, which.model=1,na.rm = T)$PCC
bestPars
x<-MAP(resDREAM)[[1]]
x
x
